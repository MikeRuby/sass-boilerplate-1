/************************************************************************************
* Company Name
* Company Website
* 
* Project Name
* Date
* Author
*************************************************************************************


-------------------------------------------------------------------------------------

                  - BEST PRACTICES AND THINGS TO REMEMBER -


- Use classes to name your objects and their components rather than relying solely 
on the semantics of HTML. By referencing these classes in your stylesheets (say, 
rather than directly styling the <img> element), your HTML can be flexible. (OOCSS)

- An object should look the same no matter where you put it. So instead of styling 
a specific <h2> with .myObject h2 {...}, create and apply a class that describes the 
<h2> in question, like <h2 class="category">. (OOCSS)

- Avoid using IDs unless they have a semantic meaning or serve a specific purpose,
like a JS hook or styling a very specific independant element. Otherwise they mess 
up specificity because they are too strong and are unique identifiers, which make 
them not reusable. (OOCSS)

- To create component variants that extend a base component (e.g., a button with 
a different coloured background or border), the "multi-class" pattern is more
scalable and allows more flexibility in big projects:
(About HTML semantics and front-end architecture)

.btn { button template styles }
.btn-primary { styles specific to primary button }
<button class="btn">Default</button>
<button class="btn btn-primary">Login</button>

- A good rule of thumb is that anything within the body of a container is clearly a 
separate object. (OOCSS)
#sidebar ul { ... }
This is questionable because the UL is clearly a separate object.

- A state is something that augments and overrides all other styles. For example, 
an accordion section may be in a collapsed or expanded state. A message may be in a
success or error state. Use the "is-state" naming pattern. (SMACSS)

- Whenever possible, include third-party stylesheets inside the main css to prevent
additional server request and save time. This can be done automatically using a 
CSS pre-processor. 

- A "too-specific" name if always better than a "too-generic" name. It might be a
better idea to name the class of specific button "btn-big-red" instead of "btn".
(Help! My Stylesheets are a Mess!)

- Keep your CSS selectors short! To increase efficiency and reduces chances of 
selector breakage, a good rule of thumb is to use, when possible, a maximum of 
3 selectors: .module > .box .title




                          - Remove after reading -

-------------------------------------------------------------------------------------
*/

@import "_mixins";
@import "starter";
@import "_helper";

@import "partials/_brand";
@import "partials/_typography";
@import "partials/_base";
@import "partials/_structure";
@import "partials/_modules";
@import "partials/_pages";
@import "partials/_forms";
@import "partials/_plugins";

@import "partials/_media-queries";
@import "partials/_print";